F00:0001       .include "\gba_example3_thumb_test_a\V1_Header.asm"
F01:0001       	;VGB: Header with dummy data
F01:0002       	;.arm                 ; Use arm instruction set.
F01:0003           ; header...
F01:0004           .org  0x08000000     ; GBA ROM Address starts at 0x08000000       
F01:0005       	.equ ProgBase,0;0x00000000
F01:0006           ;.section text			
F01:0007       
F01:0008       	.equ ramarea, 0x02000000
F01:0009       	
F01:0010       	.equ userram, 0x02000000
F01:0011       	
F01:0012       	.equ CursorX,ramarea+32
F01:0013       
F01:0014       	.equ MonitorWidth,6
F01:0015        
F01:0016       ;000h    4     ROM Entry Point  (32bit ARM branch opcode, eg. "B rom_start") 
F01:0017           b	GbaStart
               S01:08000000:  38 00 00 EA
F01:0018       
F01:0019       	.equ CursorX,ramarea+32
F01:0020       	.equ CursorY,ramarea+33
F01:0021       
F01:0022       	;.space 178					;Logo (omitted) + Program name
F01:0023       	;.byte 0x96					;Fixed value
F01:0024       	;.space 49					;Dummy Header
F01:0025       ;Standard, empty GBA header
F01:0026       .incbin "\gba_example_bins\gba_header.bin"
               S01:08000004:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S01:08000014:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F01:0027       
F01:0028       GbaStart:
F01:0029       
F01:0030       
F00:0002       
F00:0003       	;adr r0,ThumbTest
F00:0004       	;add r0,r0,#1		;Bit 0=1 THUMB ON!
F00:0005       	;bx r0
F00:0006       .incbin "\gba_example_bins\gba_arm2thumb_jump_addr_00F4.bin"
               S01:080000E8:  04 00 8F E2 01 00 80 E2 10 FF 2F E1
F00:0007       
F00:0008       	.thumb				;Thumb mode
F00:0009       ThumbTest:
F00:0010       	;Arm 2 thumb entry point 0x00F4 is next line
F00:0011       label_:                              ;branch label
F00:0012       			LSL     R0, R1, #0      ;5.1
               S01:080000F4:  08 00
F00:0013       			LSL     R0, R1, #31
               S01:080000F6:  C8 07
F00:0014       			LSR     R0, R1, #0
               S01:080000F8:  08 08
F00:0015       			LSR     R0, R1, #31
               S01:080000FA:  C8 0F
F00:0016       			ASR     R0, R1, #0
               S01:080000FC:  08 10
F00:0017       			ASR     R0, R1, #31
               S01:080000FE:  C8 17
F00:0018       			ADD     R0, R1, R2      ;5.2
               S01:08000100:  88 18
F00:0019       			ADD     R0, R1, #7
               S01:08000102:  C8 1D
F00:0020       			SUB     R0, R1, R2
               S01:08000104:  88 1A
F00:0021       			SUB     R0, R1, #7
               S01:08000106:  C8 1F
F00:0022       			MOV     R0, #0          ;5.3
               S01:08000108:  00 20
F00:0023       			MOV     R0, #255
               S01:0800010A:  FF 20
F00:0024       			CMP     R0, #0
               S01:0800010C:  00 28
F00:0025       			CMP     R0, #255
               S01:0800010E:  FF 28
F00:0026       			ADD     R0, #0
               S01:08000110:  00 30
F00:0027       			ADD     R0, #255
               S01:08000112:  FF 30
F00:0028       			SUB     R0, #0
               S01:08000114:  00 38
F00:0029       			SUB     R0, #255
               S01:08000116:  FF 38
F00:0030       			AND     R0, R1          ;5.4
               S01:08000118:  08 40
F00:0031       			EOR     R0, R1
               S01:0800011A:  48 40
F00:0032       			LSL     R0, R1
               S01:0800011C:  88 40
F00:0033       			LSR     R0, R1
               S01:0800011E:  C8 40
F00:0034       			ASR     R0, R1
               S01:08000120:  08 41
F00:0035       			ADC     R0, R1
               S01:08000122:  48 41
F00:0036       			SBC     R0, R1
               S01:08000124:  88 41
F00:0037       			ROR     R0, R1
               S01:08000126:  C8 41
F00:0038       			TST     R0, R1
               S01:08000128:  08 42
F00:0039       			NEG     R0, R1
               S01:0800012A:  48 42
F00:0040       			CMP     R0, R1
               S01:0800012C:  88 42
F00:0041       			CMN     R0, R1
               S01:0800012E:  C8 42
F00:0042       			ORR     R0, R1
               S01:08000130:  08 43
F00:0043       			MUL     R0, R1
               S01:08000132:  48 43
F00:0044       			BIC     R0, R1
               S01:08000134:  88 43
F00:0045       			MVN     R0, R1
               S01:08000136:  C8 43
F00:0046       			ADD     R0, R8          ;5.5
               S01:08000138:  40 44
F00:0047       			ADD     R8, R0
               S01:0800013A:  80 44
F00:0048       			ADD     R8, R9
               S01:0800013C:  C8 44
F00:0049       			CMP     R0, R8
               S01:0800013E:  40 45
F00:0050       			CMP     R8, R0
               S01:08000140:  80 45
F00:0051       			CMP     R8, R9
               S01:08000142:  C8 45
F00:0052       			MOV     R0, R8
               S01:08000144:  40 46
F00:0053       			MOV     R8, R0
               S01:08000146:  80 46
F00:0054       			MOV     R8, R9
               S01:08000148:  C8 46
F00:0055       			BX      R0
               S01:0800014A:  00 47
F00:0056       			BX      R8
               S01:0800014C:  40 47
F00:0057       			LDR     R0, [PC, #0]    ;5.6
               S01:0800014E:  00 48
F00:0058       			LDR     R0, [PC, #1020]
               S01:08000150:  FF 48
F00:0059       			STR     R0, [R1, R2]    ;5.7
               S01:08000152:  88 50
F00:0060       			STRB    R0, [R1, R2]
               S01:08000154:  88 54
F00:0061       			LDR     R0, [R1, R2]
               S01:08000156:  88 58
F00:0062       			LDRB    R0, [R1, R2]
               S01:08000158:  88 5C
F00:0063       			STRH    R0, [R1, R2]    ;5.8
               S01:0800015A:  88 52
F00:0064       			LDRH    R0, [R1, R2]
               S01:0800015C:  88 5A
F00:0065       			LDSB    R0, [R1, R2]
               S01:0800015E:  88 56
F00:0066       			LDSH    R0, [R1, R2]
               S01:08000160:  88 5E
F00:0067       			STR     R0, [R1, #0]    ;5.9
               S01:08000162:  08 60
F00:0068       			STR     R0, [R1, #124]
               S01:08000164:  C8 67
F00:0069       			LDR     R0, [R1, #0]
               S01:08000166:  08 68
F00:0070       			LDR     R0, [R1, #124]
               S01:08000168:  C8 6F
F00:0071       			STRB    R0, [R1, #0]
               S01:0800016A:  08 70
F00:0072       			STRB    R0, [R1, #31]
               S01:0800016C:  C8 77
F00:0073       			LDRB    R0, [R1, #0]
               S01:0800016E:  08 78
F00:0074       			LDRB    R0, [R1, #31]
               S01:08000170:  C8 7F
F00:0075       			STRH    R0, [R1, #0]    ;5.10
               S01:08000172:  08 80
F00:0076       			STRH    R0, [R1, #62]
               S01:08000174:  C8 87
F00:0077       			LDRH    R0, [R1, #0]
               S01:08000176:  08 88
F00:0078       			LDRH    R0, [R1, #62]
               S01:08000178:  C8 8F
F00:0079       			STR     R0, [SP, #0]    ;5.11
               S01:0800017A:  00 90
F00:0080       			STR     R0, [SP, #1020]
               S01:0800017C:  FF 90
F00:0081       			LDR     R0, [SP, #0]
               S01:0800017E:  00 98
F00:0082       			LDR     R0, [SP, #1020]
               S01:08000180:  FF 98
F00:0083       			ADD     R0, PC, #0      ;5.12
               S01:08000182:  00 A0
F00:0084       			ADD     R0, PC, #1020
               S01:08000184:  FF A0
F00:0085       			ADD     R0, SP, #0
               S01:08000186:  00 A8
F00:0086       			ADD     R0, SP, #1020
               S01:08000188:  FF A8
F00:0087       			ADD     SP, #0          ;5.13
               S01:0800018A:  00 B0
F00:0088       			ADD     SP, #508
               S01:0800018C:  7F B0
F00:0089       			;ADD     SP, #-2		;vAsm: "Illegal out of range"	ARMThumb_Sim Asm: B0FC, 1011000011111100	ShellStorm Asm: B0FF, 101100
F00:0090       			PUSH    {R0, R1}        ;5.14
               S01:0800018E:  03 B4
F00:0091       			PUSH    {R0, R1, LR}
               S01:08000190:  03 B5
F00:0092       			POP     {R0, R1}
               S01:08000192:  03 BC
F00:0093       			POP     {R0, R1, PC}
               S01:08000194:  03 BD
F00:0094       			STMIA   R0!, {R1, R2}   ;5.15
               S01:08000196:  06 C0
F00:0095       			LDMIA   R0!, {R1, R2}
               S01:08000198:  06 C8
F00:0096       			BEQ     label_          ;5.16
               S01:0800019A:  AB D0
F00:0097       			BNE     label_
               S01:0800019C:  AA D1
F00:0098       			BCS     label_
               S01:0800019E:  A9 D2
F00:0099       			BCC     label_
               S01:080001A0:  A8 D3
F00:0100       			BMI     label_
               S01:080001A2:  A7 D4
F00:0101       			BPL     label_
               S01:080001A4:  A6 D5
F00:0102       			BVS     label_
               S01:080001A6:  A5 D6
F00:0103       			BVC     label_
               S01:080001A8:  A4 D7
F00:0104       			BHI     label_
               S01:080001AA:  A3 D8
F00:0105       			BLS     label_
               S01:080001AC:  A2 D9
F00:0106       			BGE     label_
               S01:080001AE:  A1 DA
F00:0107       			BLT     label_
               S01:080001B0:  A0 DB
F00:0108       			BGT     label_
               S01:080001B2:  9F DC
F00:0109       			BLE     label_
               S01:080001B4:  9E DD
F00:0110       			SWI     0              ;5.17
               S01:080001B6:  00 DF
F00:0111       			SWI     255
               S01:080001B8:  FF DF
F00:0112       			B       label_         ;5.18
               S01:080001BA:  9B E7
F00:0113       			B       over
               S01:080001BC:  2B E0
F00:0114       			BL      label_         ;5.19
               S01:080001BE:  FF F7 99 FF
F00:0115       			BL      over
               S01:080001C2:  00 F0 28 F8
F00:0116       			CMP     R0, #45         ;Other
               S01:080001C6:  2D 28
F00:0117       			BGT     over
               S01:080001C8:  25 DC
F00:0118       			B       locate
               S01:080001CA:  26 E0
F00:0119       			LSR     R2, R5, #27
               S01:080001CC:  EA 0E
F00:0120       			ADD     R0, R3, R4
               S01:080001CE:  18 19
F00:0121       			SUB     R6, R2, #6
               S01:080001D0:  96 1F
F00:0122       			MOV     R0, #127
               S01:080001D2:  7F 20
F00:0123       			CMP     R2, #62
               S01:080001D4:  3E 2A
F00:0124       			ADD     R1, #127
               S01:080001D6:  7F 31
F00:0125       			SUB     R6, #1
               S01:080001D8:  01 3E
F00:0126       			EOR     R3, R4
               S01:080001DA:  63 40
F00:0127       			ROR     R1, R0
               S01:080001DC:  C1 41
F00:0128       			NEG     R5, R3
               S01:080001DE:  5D 42
F00:0129       			CMP     R2, R6
               S01:080001E0:  B2 42
F00:0130       			MUL     R0, R7
               S01:080001E2:  78 43
F00:0131       			EOR     R3, R4
               S01:080001E4:  63 40
F00:0132       			ROR     R1, R0
               S01:080001E6:  C1 41
F00:0133       			NEG     R5, R3
               S01:080001E8:  5D 42
F00:0134       			CMP     R2, R6
               S01:080001EA:  B2 42
F00:0135       			MUL     R0, R7
               S01:080001EC:  78 43
F00:0136       			ADD     PC, R5
               S01:080001EE:  AF 44
F00:0137       			CMP     R4, R12
               S01:080001F0:  64 45
F00:0138       			MOV     PC, R14
               S01:080001F2:  F7 46
F00:0139       			LDR     R3, [PC, #844]
               S01:080001F4:  D3 4B
F00:0140       			STR     R3, [R2, R6]
               S01:080001F6:  93 51
F00:0141       			LDRB    R2, [R0, R7]
               S01:080001F8:  C2 5D
F00:0142       			STRH    R4, [R3, R0]
               S01:080001FA:  1C 52
F00:0143       			LDSB    R2, [R7, R1]
               S01:080001FC:  7A 56
F00:0144       			LDSH    R3, [R4, R2]
               S01:080001FE:  A3 5E
F00:0145       			LDR     R2, [R5, #116]
               S01:08000200:  6A 6F
F00:0146       			STRB    R1, [R0, #13]
               S01:08000202:  41 73
F00:0147       			STRH    R6, [R1, #56]
               S01:08000204:  0E 87
F00:0148       			LDRH    R4, [R7, #4]
               S01:08000206:  BC 88
F00:0149       			ADD     R2, PC, #572
               S01:08000208:  8F A2
F00:0150       			ADD     R6, SP, #212
               S01:0800020A:  35 AE
F00:0151       			ADD     SP, #68
               S01:0800020C:  11 B0
F00:0152       			ADD     SP, #104
               S01:0800020E:  1A B0
F00:0153       			PUSH    {R0-R4, LR}
               S01:08000210:  1F B5
F00:0154       			POP     {R2, R6, PC}
               S01:08000212:  44 BD
F00:0155       			STMIA   R0!, {R3, R4, R5, R6, R7}
               S01:08000214:  F8 C0
F00:0156       over:       CMP     R0, #45
               S01:08000216:  2D 28
F00:0157       here:       B       here
               S01:08000218:  FE E7
F00:0158       locate:     LDR     R2, [R2, R6]
               S01:0800021A:  92 59
F00:0159       
F00:0160       	ldr r1,SPAddress	;Init Stack Pointer.
               S01:0800021C:  44 49
F00:0161       	mov sp,r1
               S01:0800021E:  8D 46
F00:0162       
F00:0163       	bl ScreenInit		;Init Screen
               S01:08000220:  00 F0 3E FA
F00:0164       
F00:0165       	;b TestMoves
F00:0166       	;b TestAdds
F00:0167       	b TestRamRW
               S01:08000224:  4A E0
F00:0168       
F00:0169       ;;;;;;;;;;;;;; Move values and Load immediate ;;;;;;;;;;;;;;
F00:0170       
F00:0171       TestMoves:		;MOV Rx,Val Rx = Val
F00:0172       
F00:0173       	mov r0,#0x12		;Move limited to 0-255 in thumb :-(
               S01:08000226:  12 20
F00:0174       	mov r1,#0xFF
               S01:08000228:  FF 21
F00:0175       
F00:0176       	;mov r1,#256			;This won't work :-(
F00:0177       
F00:0178       	bl MonitorR0R1
               S01:0800022A:  00 F0 8B F8
F00:0179       
F00:0180       	mov r0,#0x10			;Load a hexadecimal value into a register
               S01:0800022E:  10 20
F00:0181       	mov r1,#0b00000010		;Load a binary into a register (0x02)
               S01:08000230:  02 21
F00:0182       
F00:0183       	bl MonitorR0R1
               S01:08000232:  00 F0 87 F8
F00:0184       
F00:0185       	mov r0,#10				;Decimal 10
               S01:08000236:  0A 20
F00:0186       	mov r1,#65				;Ascii A - Decimal 	(0x41)
               S01:08000238:  41 21
F00:0187       
F00:0188       	bl MonitorR0R1
               S01:0800023A:  00 F0 83 F8
F00:0189       
F00:0190       	bl NewLine
               S01:0800023E:  00 F0 45 FA
F00:0191       
F00:0192       	mov r0,r1				;Transfer Reg to Reg
               S01:08000242:  08 1C
F00:0193       
F00:0194       	bl MonitorR0R1
               S01:08000244:  00 F0 7E F8
F00:0195       
F00:0196       	;mov r8,#10				;This won't work, Can't set R8-15 directly
F00:0197       	;Most commansd on ARM-Thumb only support R0-R7
F00:0198       
F00:0199       	mov r0,#10
               S01:08000248:  0A 20
F00:0200       	mov r8,r0				;This will work, set low reg r0-r7 first!
               S01:0800024A:  80 46
F00:0201       
F00:0202       	bl MonitorR0R8
               S01:0800024C:  00 F0 9C F8
F00:0203       
F00:0204       	bl NewLine
               S01:08000250:  00 F0 3C FA
F00:0205       
F00:0206       	ldr r0,TestVal			;Load 32 bit value from address after PC
               S01:08000254:  32 48
F00:0207       
F00:0208       	;ldr r8,TestVal			;This won't work, Reg 0-7 only
F00:0209       	;ldr r0,ThumbTest		;This won't work, Address must be below PC
F00:0210       
F00:0211       	bl MonitorR0R8
               S01:08000256:  00 F0 97 F8
F00:0212       
F00:0213       	bl NewLine
               S01:0800025A:  00 F0 37 FA
F00:0214       
F00:0215       	;mov r1,#-4				;This won't work, can only load
F00:0216       
F00:0217       	mov r0,#0
               S01:0800025E:  00 20
F00:0218       	sub r0,#4				;This will work
               S01:08000260:  04 38
F00:0219       
F00:0220       	bl MonitorR0R1
               S01:08000262:  00 F0 6F F8
F00:0221       
F00:0222       	mov r1,#8				;Load R1 with 8
               S01:08000266:  08 21
F00:0223       	mvn r0,r1				;Load R0 with NOT R1
               S01:08000268:  C8 43
F00:0224       	;mvn r0,#8				;This won't work, can only use
F00:0225       								;MVN with Register source
F00:0226       	bl MonitorR0R1
               S01:0800026A:  00 F0 6B F8
F00:0227       
F00:0228       	neg r1,r1					;Negate R1
               S01:0800026E:  49 42
F00:0229       
F00:0230       	bl MonitorR0R1
               S01:08000270:  00 F0 68 F8
F00:0231       
F00:0232       	b InfLoop					;Halt
               S01:08000274:  51 E0
F00:0233       
F00:0234       ;;;;;;;;;;;;;; Add and Subtract ;;;;;;;;;;;;;;
F00:0235       
F00:0236       TestAdds:
F00:0237       
F00:0238       	mov r0,#0
               S01:08000276:  00 20
F00:0239       	ldr r1,TestVal			;Load 32 bit value from address after PC
               S01:08000278:  29 49
F00:0240       
F00:0241       	bl MonitorR0R1
               S01:0800027A:  00 F0 63 F8
F00:0242       
F00:0243       	add r0,r1,#0x7			;R0=R1+7 (Short form - Values up to 7)
               S01:0800027E:  C8 1D
F00:0244       	sub r1,r1,#0x7			;R1=R1-7 (Short form - Values up to 7)
               S01:08000280:  C9 1F
F00:0245       
F00:0246       	;add r0,r1,#10			;This won't work, 0-7 only
F00:0247       
F00:0248       	bl MonitorR0R1
               S01:08000282:  00 F0 5F F8
F00:0249       
F00:0250       	add r0,#0x10			;R0=R0+16 (value up to 255)
               S01:08000286:  10 30
F00:0251       	sub r1,#0x10			;R1=R1-16 (value up to 255)
               S01:08000288:  10 39
F00:0252       
F00:0253       	bl MonitorR0R1
               S01:0800028A:  00 F0 5B F8
F00:0254       
F00:0255       	bl NewLine
               S01:0800028E:  00 F0 1D FA
F00:0256       
F00:0257       	ldr r1,TestVal			;Load 32 bit value from address after PC
               S01:08000292:  23 49
F00:0258       	mov r0,#0x20
               S01:08000294:  20 20
F00:0259       	bl MonitorR0R1
               S01:08000296:  00 F0 55 F8
F00:0260       
F00:0261       	add r0,r0,r1			;R0=R0+R1
               S01:0800029A:  40 18
F00:0262       	bl MonitorR0R1
               S01:0800029C:  00 F0 52 F8
F00:0263       	sub r0,r0,r1			;R0=R0-R1
               S01:080002A0:  40 1A
F00:0264       	bl MonitorR0R1
               S01:080002A2:  00 F0 4F F8
F00:0265       
F00:0266       	bl NewLine
               S01:080002A6:  00 F0 11 FA
F00:0267       
F00:0268       	mov r0,#8
               S01:080002AA:  08 20
F00:0269       	ldr r1,TestVal
               S01:080002AC:  1C 49
F00:0270       	mov r8,r1
               S01:080002AE:  88 46
F00:0271       	bl MonitorR0R8
               S01:080002B0:  00 F0 6A F8
F00:0272       
F00:0273       	add r8,r0				;High Reg version of add R8=R8+r0
               S01:080002B4:  80 44
F00:0274       	;sub r8,r0				;Doesn't work - no Subtract version
F00:0275       
F00:0276       	bl MonitorR0R8
               S01:080002B6:  00 F0 67 F8
F00:0277       
F00:0278       	b InfLoop				;Halt
               S01:080002BA:  2E E0
F00:0279       
F00:0280       ;;;;;;;;;;;;;; Load and Store ;;;;;;;;;;;;;;
F00:0281       
F00:0282       TestRamRW:
F00:0283       
F00:0284       	bl ShowTestRam
               S01:080002BC:  00 F0 3A F8
F00:0285       
F00:0286       	ldr r0,TestVal		;Load R0 from PC relative TestVal
               S01:080002C0:  17 48
F00:0287       	ldr r1,TestRam
               S01:080002C2:  18 49
F00:0288       
F00:0289       	str r0,[r1,#0]		;Store R0 to Address R0+0 (TestRam)
               S01:080002C4:  08 60
F00:0290       	str r0,[r1,#8]		;Store R0 to Address R0+8 (TestRam)
               S01:080002C6:  88 60
F00:0291       
F00:0292       	ldr r2,[r1,#0]		;Load R2 from Address R0+0 (TestRam)
               S01:080002C8:  0A 68
F00:0293       	ldr r3,[r1,#8]		;Load R3 from Address R0+8 (TestRam)
               S01:080002CA:  8B 68
F00:0294       
F00:0295       	bl MonitorR0R1R2R3
               S01:080002CC:  00 F0 46 F8
F00:0296       
F00:0297       	bl ShowTestRam
               S01:080002D0:  00 F0 30 F8
F00:0298       	bl NewLine
               S01:080002D4:  00 F0 FA F9
F00:0299       	mov r2,#4			;Final address must be 32 bit aligned for 32 bit load
               S01:080002D8:  04 22
F00:0300       	;mov r2,#4			;This will not work! (will work for LDRH)
F00:0301       	str r0,[r1,r2]		;offset in register
               S01:080002DA:  88 50
F00:0302       	bl ShowTestRam
               S01:080002DC:  00 F0 2A F8
F00:0303       
F00:0304       	bl NewLine
               S01:080002E0:  00 F0 F4 F9
F00:0305       
F00:0306       	ldr r2,TestRam		;Load R2 with our test data
               S01:080002E4:  0F 4A
F00:0307       
F00:0308       	ldrb r0,[r2,#0]		;Load Unsigned byte
               S01:080002E6:  10 78
F00:0309       	ldrh r1,[r2,#0]		;Load Unsigned Half
               S01:080002E8:  11 88
F00:0310       
F00:0311       	bl MonitorR0R1
               S01:080002EA:  00 F0 2B F8
F00:0312       	bl NewLine
               S01:080002EE:  00 F0 ED F9
F00:0313       
F00:0314       	mov r0,#0
               S01:080002F2:  00 20
F00:0315       	sub r0,r0,#1		;Set R0,R1 to 0xFFFFFFFF
               S01:080002F4:  40 1E
F00:0316       	mov r1,r0
               S01:080002F6:  01 1C
F00:0317       
F00:0318       	strb r0,[r2,#4]		;Load Unsigned byte
               S01:080002F8:  10 71
F00:0319       	strh r0,[r2,#8]		;Load Unsigned Half
               S01:080002FA:  10 81
F00:0320       	bl MonitorR0R1
               S01:080002FC:  00 F0 22 F8
F00:0321       	bl ShowTestRam
               S01:08000300:  00 F0 18 F8
F00:0322       
F00:0323       
F00:0324       	mov r3,#2
               S01:08000304:  02 23
F00:0325       	ldrb r0,[r2,r3]		;Load Unsigned byte - note top bits cleared
               S01:08000306:  D0 5C
F00:0326       	ldrh r1,[r2,r3]		;Load Unsigned Half - note top bits cleared
               S01:08000308:  D1 5A
F00:0327       
F00:0328       	bl MonitorR0R1
               S01:0800030A:  00 F0 1B F8
F00:0329       
F00:0330       	mov r3,#0			;Need to use 2 register addresses for these
               S01:0800030E:  00 23
F00:0331       	ldsb r0,[r2,r3]		;Load signed byte
               S01:08000310:  D0 56
F00:0332       	ldsh r1,[r2,r3]		;Load signed Half (16 bit)
               S01:08000312:  D1 5E
F00:0333       
F00:0334       	;Note: No need for signed versions of STR
F00:0335       	bl MonitorR0R1
               S01:08000314:  00 F0 16 F8
F00:0336       
F00:0337       	b InfLoop					;Halt
               S01:08000318:  FF E7
F00:0338       
F00:0339       InfLoop:
F00:0340           b InfLoop					;Halt
               S01:0800031A:  FE E7
F00:0341       
F00:0342       
F00:0343       	.align 4
F00:0344       TestVal:
F00:0345       	.long 0x22446688
               S01:08000320:  88 66 44 22
F00:0346       
F00:0347       TestRam:
F00:0348       	.long 0x0200F000
               S01:08000324:  00 F0 00 02
F00:0349       
F00:0350       
F00:0351       	.align 4
F00:0352       SPAddress:
F00:0353       	.long 0x03000000
               S01:08000330:  00 00 00 03
F00:0354       
F00:0355       ShowTestRam:
F00:0356       	push {r0-r7, lr}
               S01:08000334:  FF B5
F00:0357       		ldr	r0,TestRam2		;Address
               S01:08000336:  02 48
F00:0358       		mov r1,#2			;Lines
               S01:08000338:  02 21
F00:0359       		bl MemDump
               S01:0800033A:  00 F0 B6 FA
F00:0360       	pop {r0-r7, pc}
               S01:0800033E:  FF BD
F00:0361       TestRam2:
F00:0362       	.long 0x0200F000
               S01:08000340:  00 F0 00 02
F00:0363       
F00:0364       
F00:0365       MonitorR0R1:
F00:0366       	push {r0-r7, lr}
               S01:08000344:  FF B5
F00:0367       		mov r6,#0
               S01:08000346:  00 26
F00:0368       		mov r7,r0
               S01:08000348:  07 1C
F00:0369       		bl ShowReg ;ShowReg R6=R7
               S01:0800034A:  00 F0 6B FA
F00:0370       		mov r6,#1
               S01:0800034E:  01 26
F00:0371       		mov r7,r1
               S01:08000350:  0F 1C
F00:0372       		bl ShowReg ;ShowReg R6=R7
               S01:08000352:  00 F0 67 FA
F00:0373       		bl newline
               S01:08000356:  00 F0 B9 F9
F00:0374       	pop {r0-r7, pc}
               S01:0800035A:  FF BD
F00:0375       
F00:0376       MonitorR0R1R2R3:
F00:0377       	push {r0-r7, lr}
               S01:0800035C:  FF B5
F00:0378       		mov r6,#0
               S01:0800035E:  00 26
F00:0379       		mov r7,r0
               S01:08000360:  07 1C
F00:0380       		bl ShowReg ;ShowReg R6=R7
               S01:08000362:  00 F0 5F FA
F00:0381       		mov r6,#1
               S01:08000366:  01 26
F00:0382       		mov r7,r1
               S01:08000368:  0F 1C
F00:0383       		bl ShowReg ;ShowReg R6=R7
               S01:0800036A:  00 F0 5B FA
F00:0384       		bl newline
               S01:0800036E:  00 F0 AD F9
F00:0385       		mov r6,#2
               S01:08000372:  02 26
F00:0386       		mov r7,r2
               S01:08000374:  17 1C
F00:0387       		bl ShowReg ;ShowReg R6=R7
               S01:08000376:  00 F0 55 FA
F00:0388       		mov r6,#3
               S01:0800037A:  03 26
F00:0389       		mov r7,r3
               S01:0800037C:  1F 1C
F00:0390       		bl ShowReg ;ShowReg R6=R7
               S01:0800037E:  00 F0 51 FA
F00:0391       		bl newline
               S01:08000382:  00 F0 A3 F9
F00:0392       	pop {r0-r7, pc}
               S01:08000386:  FF BD
F00:0393       
F00:0394       MonitorR0R8:
F00:0395       	push {r0-r7, lr}
               S01:08000388:  FF B5
F00:0396       		mov r6,#0
               S01:0800038A:  00 26
F00:0397       		mov r7,r0
               S01:0800038C:  07 1C
F00:0398       		bl ShowReg ;ShowReg R6=R7
               S01:0800038E:  00 F0 49 FA
F00:0399       		mov r7,r8
               S01:08000392:  47 46
F00:0400       		bl ShowReg ;ShowReg R6=R7
               S01:08000394:  00 F0 46 FA
F00:0401       		bl newline
               S01:08000398:  00 F0 98 F9
F00:0402       	pop {r0-r7, pc}
               S01:0800039C:  FF BD
F00:0403       
F00:0404       
F00:0405       
F00:0406       
F00:0407       
F00:0408       
F00:0409       	.align 4
F00:0410       
F00:0411       BitmapFont:
F00:0412       	.incbin "\ResALL\Font96.FNT"
               S01:080003A0:  00 00 00 00 00 00 00 00 10 18 18 18 18 00 18 00
               S01:080003B0:  28 6C 28 00 00 00 00 00 00 28 7C 28 7C 28 00 00
F00:0413       
F00:0414       	.include "/srcALL/V1_Thumb_BitmapMemory.asm"
F02:0001       	.ifdef BuildROS
F02:0002       		.include "\SrcROS\V1_Thumb_BitmapMemory.asm"
F02:0003       	.endif
F02:0004       	.ifdef BuildGBA
F02:0005       		.ifdef Bmp256
F02:0006       			.include "\SrcGBA\V1_Thumb_BitmapMemory_256Color.asm"
F02:0007       		
F02:0008       		.else
F02:0009       			.include "\SrcGBA\V1_Thumb_BitmapMemory.asm"
F03:0001       
F03:0002       
F03:0003       ScreenInit:
F03:0004       ;Turn on the screen - ScreenMode 3 - 240x160 16 bit color
F03:0005       	push {r0-r6, lr}
               S01:080006A0:  7F B5
F03:0006       		ldr r4,screenaddr  	;DISPCNT -LCD Control
               S01:080006A2:  08 4C
F03:0007       		ldr r2,screensetting    		;4= Layer 2 on / 3= ScreenMode 3
               S01:080006A4:  08 4A
F03:0008       		str	r2,[r4,#0]         	
               S01:080006A6:  22 60
F03:0009       
F03:0010       		;Fill the screen	
F03:0011       		ldr r0,screenram	;Screen Ram
               S01:080006A8:  27 48
F03:0012       			
F03:0013       		ldr r1,screencolor
               S01:080006AA:  05 49
F03:0014       		mov r2, #192
               S01:080006AC:  C0 22
F03:0015       		lsl r2,r2,#8 	;*256
               S01:080006AE:  12 02
F03:0016       
F03:0017       FillScreenLoop:
F03:0018       		strh r1,[r0,#0]		;Store+inc 2 bytes
               S01:080006B0:  01 80
F03:0019       		add r0,#2
               S01:080006B2:  02 30
F03:0020       		sub r2, #1		
               S01:080006B4:  01 3A
F03:0021       		bne FillScreenLoop	
               S01:080006B6:  FB D1
F03:0022       		
F03:0023       	pop {r0-r6, pc}
               S01:080006B8:  7F BD
F03:0024       
F03:0025       	.align 4
F03:0026       screencolor:
F03:0027       	.long 0b1000000010001010	;  ABBBBBGGGGGRRRRR	A=Alpha
               S01:080006C0:  8A 80 00 00
F03:0028       screenaddr:
F03:0029       	.long 0x04000000
               S01:080006C4:  00 00 00 04
F03:0030       screensetting:
F03:0031       	.long 0x403
               S01:080006C8:  03 04 00 00
F03:0032       
F03:0033       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F03:0034       
F03:0035       	
F03:0036       
F03:0037       	  
F03:0038       NewLine:
F03:0039       	push {r0-r6, lr}
               S01:080006CC:  7F B5
F03:0040       		ldr r3,adrCursorX
               S01:080006CE:  1C 4B
F03:0041       		mov r0,#0
               S01:080006D0:  00 20
F03:0042       		strB r0,[r3,#0]	;X
               S01:080006D2:  18 70
F03:0043       		
F03:0044       		ldr r3,adrCursorY
               S01:080006D4:  1B 4B
F03:0045       		ldrB r0,[r3,#0]	;Y
               S01:080006D6:  18 78
F03:0046       		add r0,r0,#1
               S01:080006D8:  40 1C
F03:0047       		strB r0,[r3,#0]	;Y
               S01:080006DA:  18 70
F03:0048       	pop {r0-r6, pc}
               S01:080006DC:  7F BD
F03:0049       	
F03:0050       	.equ MonitorWidth,6
F03:0051       ;	.include "/srcALL/V1_Monitor.asm"
F03:0052       
F03:0053       
F03:0054       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F03:0055       		
F03:0056       	
F03:0057       
F03:0058       
F03:0059       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F03:0060       
F03:0061       PrintString:					;Print 255 terminated string 
F03:0062       	push {r0-r6, lr}
               S01:080006DE:  7F B5
F03:0063       PrintStringAgain:
F03:0064       		ldrB r0,[r1,#0]
               S01:080006E0:  08 78
F03:0065       		add r1,#1
               S01:080006E2:  01 31
F03:0066       		cmp r0,#255
               S01:080006E4:  FF 28
F03:0067       		beq PrintStringDone		;Repeat until 255
               S01:080006E6:  02 D0
F03:0068       		bl printchar 			;Print Char
               S01:080006E8:  00 F0 02 F8
F03:0069       		b PrintStringAgain
               S01:080006EC:  F8 E7
F03:0070       PrintStringDone:
F03:0071       	pop {r0-r6, pc}
               S01:080006EE:  7F BD
F03:0072       	
F03:0073       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F03:0074       	
F03:0075       	
F03:0076       PrintChar:
F03:0077       	push {r0-r7, lr}
               S01:080006F0:  FF B5
F03:0078       		mov r4,#0
               S01:080006F2:  00 24
F03:0079       		mov r5,#0
               S01:080006F4:  00 25
F03:0080       		
F03:0081       		ldr r3,adrCursorX		;LDR Rd, [pc, #immed_8x4]
               S01:080006F6:  12 4B
F03:0082       		ldrB r4,[r3,#0]	;X
               S01:080006F8:  1C 78
F03:0083       		
F03:0084       		ldr r3,adrCursorY
               S01:080006FA:  12 4B
F03:0085       		ldrB r5,[r3,#0]	;Y
               S01:080006FC:  1D 78
F03:0086       		
F03:0087       		ldr r3,screenram ;#0x06000000 ; VRAM
               S01:080006FE:  12 4B
F03:0088       		
F03:0089       		mov r6,#16			;Xpos 
               S01:08000700:  10 26
F03:0090       		mul r6,r4
               S01:08000702:  66 43
F03:0091       		add r3,r3,r6
               S01:08000704:  9B 19
F03:0092       		
F03:0093       		ldr r6,LineSize		;Ypos 
               S01:08000706:  11 4E
F03:0094       		mul r6,r5
               S01:08000708:  6E 43
F03:0095       		add r3,r3,r6
               S01:0800070A:  9B 19
F03:0096       		
F03:0097       		ldr r4,BitmapFontAddress 	;Font source
               S01:0800070C:  13 4C
F03:0098       		sub r0,#32		;First Char is 32 (Space)
               S01:0800070E:  20 38
F03:0099       		lsl r0,r0,#3
               S01:08000710:  C0 00
F03:0100       		add r4,r4,r0 ;r4,r0,asl #3	;8 bytes per char
               S01:08000712:  24 18
F03:0101       		
F03:0102       		
F03:0103       		ldr r2, FontColor
               S01:08000714:  0F 4A
F03:0104       		
F03:0105       		
F03:0106       		
F03:0107       		mov r6,#8			;8 lines 
               S01:08000716:  08 26
F03:0108       DrawLine:
F03:0109       		mov r7,#8 			;8 pixels per line
               S01:08000718:  08 27
F03:0110       		ldrb r1,[r4,#0]		;Load Letter
               S01:0800071A:  21 78
F03:0111       		add r4,#1
               S01:0800071C:  01 34
F03:0112       		ldr r5,BitMask	;Mask
               S01:0800071E:  0E 4D
F03:0113       
F03:0114       				;  ABBBBBGGGGGRRRRR	A=Alpha
F03:0115       		
F03:0116       DrawPixel:
F03:0117       		tst r1,r5			;Is bit 1?
               S01:08000720:  29 42
F03:0118       		beq DrawPixelSkip 
               S01:08000722:  00 D0
F03:0119       		strh r2,[r3,#0]		;Yes? then fill pixel
               S01:08000724:  1A 80
F03:0120       DrawPixelSkip:		
F03:0121       		add r3,r3,#2
               S01:08000726:  9B 1C
F03:0122       		lsr r5,r5,#1	;Bitshift Mask
               S01:08000728:  6D 08
F03:0123       		sub r7,r7,#1
               S01:0800072A:  7F 1E
F03:0124       		bne DrawPixel		;Next Hpixel
               S01:0800072C:  F8 D1
F03:0125       		ldr r0,LineSize2
               S01:0800072E:  08 48
F03:0126       		add r3,r3,r0	;Move Down a line
               S01:08000730:  1B 18
F03:0127       		sub r6,r6,#1
               S01:08000732:  76 1E
F03:0128       		bne DrawLine		;Next Vline
               S01:08000734:  F0 D1
F03:0129       		
F03:0130       		ldr r3,adrCursorX
               S01:08000736:  02 4B
F03:0131       		ldrB r0,[r3,#0]	
               S01:08000738:  18 78
F03:0132       		add r0,r0,#1		;Move across screen
               S01:0800073A:  40 1C
F03:0133       		strB r0,[r3,#0]	
               S01:0800073C:  18 70
F03:0134       	pop {r0-r7, pc}
               S01:0800073E:  FF BD
F03:0135       
F03:0136       	.align 4
F03:0137       adrCursorX:
F03:0138       	.long CursorX
               S01:08000740:  20 00 00 02
F03:0139       adrCursorY:
F03:0140       	.long CursorY
               S01:08000744:  21 00 00 02
F03:0141       screenram:
F03:0142       	.long 0x06000000
               S01:08000748:  00 00 00 06
F03:0143       LineSize:
F03:0144       	.long 240*8*2
               S01:0800074C:  00 0F 00 00
F03:0145       LineSize2:
F03:0146       	.long 480-16
               S01:08000750:  D0 01 00 00
F03:0147       FontColor:
F03:0148       	.long 0b1111111101000000
               S01:08000754:  40 FF 00 00
F03:0149       BitMask:
F03:0150       	.long 0b100000000
               S01:08000758:  00 01 00 00
F03:0151       BitmapFontAddress:
F03:0152       	.long BitmapFont
               S01:0800075C:  A0 03 00 08
F03:0153       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F03:0154       	
F02:0010       		.endif
F02:0011       	.endif
F02:0012       	.ifdef BuildNDS
F02:0013       		.include "\SrcNDS\V1_Thumb_BitmapMemory.asm"
F02:0014       	.endif
F00:0415       	.include "/srcALL/V1_Thumb_Monitor.asm"
F04:0001       
F04:0002       Monitor:
F04:0003       	push {r0-r7, lr}
               S01:08000760:  FF B5
F04:0004       	push {r7}
               S01:08000762:  80 B4
F04:0005       	push {r6}
               S01:08000764:  40 B4
F04:0006       		mov r6,#0
               S01:08000766:  00 26
F04:0007       		mov r7,r0
               S01:08000768:  07 1C
F04:0008       		bl ShowReg ;ShowReg R6=R7
               S01:0800076A:  00 F0 5B F8
F04:0009       		mov r7,r8
               S01:0800076E:  47 46
F04:0010       		bl ShowReg ;ShowReg R6=R7
               S01:08000770:  00 F0 58 F8
F04:0011       		bl newline
               S01:08000774:  FF F7 AA FF
F04:0012       		
F04:0013       		mov r6,#1
               S01:08000778:  01 26
F04:0014       		mov r7,r1
               S01:0800077A:  0F 1C
F04:0015       		bl ShowReg ;ShowReg R6=R7
               S01:0800077C:  00 F0 52 F8
F04:0016       		mov r7,r9
               S01:08000780:  4F 46
F04:0017       		bl ShowReg ;ShowReg R6=R7
               S01:08000782:  00 F0 4F F8
F04:0018       		bl newline
               S01:08000786:  FF F7 A1 FF
F04:0019       		
F04:0020       		mov r6,#2
               S01:0800078A:  02 26
F04:0021       		mov r7,r2
               S01:0800078C:  17 1C
F04:0022       		bl ShowReg ;ShowReg R6=R7
               S01:0800078E:  00 F0 49 F8
F04:0023       		mov r7,r10
               S01:08000792:  57 46
F04:0024       		bl ShowReg ;ShowReg R6=R7
               S01:08000794:  00 F0 46 F8
F04:0025       		bl newline
               S01:08000798:  FF F7 98 FF
F04:0026       		
F04:0027       		mov r6,#3
               S01:0800079C:  03 26
F04:0028       		mov r7,r3
               S01:0800079E:  1F 1C
F04:0029       		bl ShowReg ;ShowReg R6=R7
               S01:080007A0:  00 F0 40 F8
F04:0030       		mov r7,r11
               S01:080007A4:  5F 46
F04:0031       		bl ShowReg ;ShowReg R6=R7
               S01:080007A6:  00 F0 3D F8
F04:0032       		bl newline
               S01:080007AA:  FF F7 8F FF
F04:0033       		
F04:0034       		mov r6,#4
               S01:080007AE:  04 26
F04:0035       		mov r7,r4
               S01:080007B0:  27 1C
F04:0036       		bl ShowReg ;ShowReg R6=R7
               S01:080007B2:  00 F0 37 F8
F04:0037       		mov r7,r12
               S01:080007B6:  67 46
F04:0038       		bl ShowReg ;ShowReg R6=R7
               S01:080007B8:  00 F0 34 F8
F04:0039       		bl newline
               S01:080007BC:  FF F7 86 FF
F04:0040       		
F04:0041       		mov r6,#5
               S01:080007C0:  05 26
F04:0042       		mov r7,r5
               S01:080007C2:  2F 1C
F04:0043       		bl ShowReg ;ShowReg R6=R7
               S01:080007C4:  00 F0 2E F8
F04:0044       		mov r7,r13
               S01:080007C8:  6F 46
F04:0045       		add r7,#44
               S01:080007CA:  2C 37
F04:0046       		bl ShowReg ;ShowReg R6=R7
               S01:080007CC:  00 F0 2A F8
F04:0047       		bl newline
               S01:080007D0:  FF F7 7C FF
F04:0048       		
F04:0049       		mov r6,#6
               S01:080007D4:  06 26
F04:0050       	pop {r7}
               S01:080007D6:  80 BC
F04:0051       		bl ShowReg ;ShowReg R6=R7
               S01:080007D8:  00 F0 24 F8
F04:0052       		mov r7,r14
               S01:080007DC:  77 46
F04:0053       		bl ShowReg ;ShowReg R6=R7
               S01:080007DE:  00 F0 21 F8
F04:0054       		bl newline
               S01:080007E2:  FF F7 73 FF
F04:0055       		
F04:0056       		mov r6,#7
               S01:080007E6:  07 26
F04:0057       	pop {r7}
               S01:080007E8:  80 BC
F04:0058       		bl ShowReg ;ShowReg R6=R7
               S01:080007EA:  00 F0 1B F8
F04:0059       		mov r7,r15
               S01:080007EE:  7F 46
F04:0060       		bl ShowReg ;ShowReg R6=R7
               S01:080007F0:  00 F0 18 F8
F04:0061       		bl newline	
               S01:080007F4:  FF F7 6A FF
F04:0062       		
F04:0063       	pop {r0-r7, pc}
               S01:080007F8:  FF BD
F04:0064       	
F04:0065       	
F04:0066       	
F04:0067       ShowRegLR:		
F04:0068       		mov r0,#76 ; L
               S01:080007FA:  4C 20
F04:0069       		bl PrintChar
               S01:080007FC:  FF F7 78 FF
F04:0070       		
F04:0071       		mov r0,#82 ; R
               S01:08000800:  52 20
F04:0072       		bl PrintChar
               S01:08000802:  FF F7 75 FF
F04:0073       	b ShowRegB
               S01:08000806:  1A E0
F04:0074       
F04:0075       	
F04:0076       ShowRegSP:		
F04:0077       		mov r0,#83 ; S
               S01:08000808:  53 20
F04:0078       		bl PrintChar
               S01:0800080A:  FF F7 71 FF
F04:0079       		
F04:0080       		mov r0,#80 ; P
               S01:0800080E:  50 20
F04:0081       		bl PrintChar
               S01:08000810:  FF F7 6E FF
F04:0082       	b ShowRegB
               S01:08000814:  13 E0
F04:0083       	
F04:0084       ShowRegPC:		
F04:0085       		mov r0,#80 ; P
               S01:08000816:  50 20
F04:0086       		bl PrintChar
               S01:08000818:  FF F7 6A FF
F04:0087       		
F04:0088       		mov r0,#67 ; C
               S01:0800081C:  43 20
F04:0089       		bl PrintChar	
               S01:0800081E:  FF F7 67 FF
F04:0090       	b ShowRegB
               S01:08000822:  0C E0
F04:0091       	
F04:0092       ShowReg:					;ShowReg R6=R7
F04:0093       	push {r0-r5,r7, lr}
               S01:08000824:  BF B5
F04:0094       		cmp r6,#15
               S01:08000826:  0F 2E
F04:0095       		beq ShowRegPC
               S01:08000828:  F5 D0
F04:0096       		
F04:0097       		cmp r6,#14
               S01:0800082A:  0E 2E
F04:0098       		beq ShowRegLR
               S01:0800082C:  E5 D0
F04:0099       		cmp r6,#13
               S01:0800082E:  0D 2E
F04:0100       		beq ShowRegSP
               S01:08000830:  EA D0
F04:0101       		
F04:0102       		
F04:0103       		mov r0,#82 ; D
               S01:08000832:  52 20
F04:0104       		bl PrintChar
               S01:08000834:  FF F7 5C FF
F04:0105       		
F04:0106       		mov r0,r6 ; 0
               S01:08000838:  30 1C
F04:0107       		bl ShowHexChar
               S01:0800083A:  00 F0 2C F8
F04:0108       ShowRegB:		
F04:0109       		mov r0,#58 ; :
               S01:0800083E:  3A 20
F04:0110       		bl PrintChar
               S01:08000840:  FF F7 56 FF
F04:0111       		
F04:0112       		bl ShowHex32
               S01:08000844:  00 F0 0D F8
F04:0113       		add r6,#8
               S01:08000848:  08 36
F04:0114       		
F04:0115       		mov r0,#32 ; space
               S01:0800084A:  20 20
F04:0116       		bl PrintChar
               S01:0800084C:  FF F7 50 FF
F04:0117       	pop {r0-r5,r7, pc}
               S01:08000850:  BF BD
F04:0118       ShowHex:
F04:0119       	push {r0-r7, lr}
               S01:08000852:  FF B5
F04:0120       		LSR r0,r7,#4
               S01:08000854:  38 09
F04:0121       		bl ShowHexChar 			;Print Char
               S01:08000856:  00 F0 1E F8
F04:0122       		mov r0,r7
               S01:0800085A:  38 1C
F04:0123       		bl ShowHexChar 			;Print Char
               S01:0800085C:  00 F0 1B F8
F04:0124       	pop {r0-r7, pc}
               S01:08000860:  FF BD
F04:0125       	
F04:0126       	
F04:0127       ShowHex32:			;Show 32 bit val R7
F04:0128       	push {r0-r7, lr}
               S01:08000862:  FF B5
F04:0129       		LSR r0,r7,#28
               S01:08000864:  38 0F
F04:0130       		bl ShowHexChar 			;Print Char
               S01:08000866:  00 F0 16 F8
F04:0131       		LSR r0,r7,#24
               S01:0800086A:  38 0E
F04:0132       		bl ShowHexChar 			;Print Char
               S01:0800086C:  00 F0 13 F8
F04:0133       		LSR r0,r7,#20
               S01:08000870:  38 0D
F04:0134       		bl ShowHexChar 			;Print Char
               S01:08000872:  00 F0 10 F8
F04:0135       		LSR r0,r7,#16
               S01:08000876:  38 0C
F04:0136       		bl ShowHexChar 			;Print Char
               S01:08000878:  00 F0 0D F8
F04:0137       		LSR r0,r7,#12
               S01:0800087C:  38 0B
F04:0138       		bl ShowHexChar 			;Print Char
               S01:0800087E:  00 F0 0A F8
F04:0139       		LSR r0,r7,#8
               S01:08000882:  38 0A
F04:0140       		bl ShowHexChar 			;Print Char
               S01:08000884:  00 F0 07 F8
F04:0141       		LSR r0,r7,#4
               S01:08000888:  38 09
F04:0142       		bl ShowHexChar 			;Print Char
               S01:0800088A:  00 F0 04 F8
F04:0143       		mov r0,r7
               S01:0800088E:  38 1C
F04:0144       		bl ShowHexChar 			;Print Char
               S01:08000890:  00 F0 01 F8
F04:0145       	pop {r0-r7, pc}
               S01:08000894:  FF BD
F04:0146       	
F04:0147       	
F04:0148       
F04:0149       
F04:0150       ShowHexChar:
F04:0151       	push {r0-r7, lr}
               S01:08000896:  FF B5
F04:0152       		mov r2,#0xF
               S01:08000898:  0F 22
F04:0153       		and r0,r2
               S01:0800089A:  10 40
F04:0154       		cmp r0,#10
               S01:0800089C:  0A 28
F04:0155       		blt ShowHexN
               S01:0800089E:  00 DB
F04:0156       		add r0,#7
               S01:080008A0:  07 30
F04:0157       ShowHexN:
F04:0158       		add r0,#48
               S01:080008A2:  30 30
F04:0159       		bl PrintChar
               S01:080008A4:  FF F7 24 FF
F04:0160       	pop {r0-r7, pc}
               S01:080008A8:  FF BD
F04:0161       	;STMFD sp!,{r0-r12, lr}
F04:0162       		;mov r3,
F04:0163       		;and r0,r2,#0x0F ; r3
F04:0164       		;cmp r0,#10
F04:0165       		;addge r0,r0,#7
F04:0166       		;add r0,r0,#48
F04:0167       		;bl PrintChar	
F04:0168       	;LDMFD sp!,{r0-r12, pc}	
F04:0169       	
F04:0170       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
F04:0171       
F04:0172       
F04:0173       
F04:0174       	  
F04:0175       	;mov	r0,#userram		;Address
F04:0176       	;mov r1,#2				;Lines
F04:0177       	;bl MemDump
F04:0178       MemDump:				
F04:0179       	push {r0-r7, lr}
               S01:080008AA:  FF B5
F04:0180       		mov r4,r0
               S01:080008AC:  04 1C
F04:0181       		mov r7,r0
               S01:080008AE:  07 1C
F04:0182       		bl ShowHex32
               S01:080008B0:  FF F7 D7 FF
F04:0183       		mov r0,#58 ; :
               S01:080008B4:  3A 20
F04:0184       		bl PrintChar
               S01:080008B6:  FF F7 1B FF
F04:0185       		bl NewLine
               S01:080008BA:  FF F7 07 FF
F04:0186       
F04:0187       MemDumpNextLine:
F04:0188       		mov r3,#0
               S01:080008BE:  00 23
F04:0189       MemDumpAgain:			
F04:0190       		ldrb r7,[r4,r3]
               S01:080008C0:  E7 5C
F04:0191       		bl ShowHex
               S01:080008C2:  FF F7 C6 FF
F04:0192       		
F04:0193       		mov r0,#32 ; space
               S01:080008C6:  20 20
F04:0194       		bl PrintChar
               S01:080008C8:  FF F7 12 FF
F04:0195       		
F04:0196       		add r3,r3,#1
               S01:080008CC:  5B 1C
F04:0197       		cmp r3,#MonitorWidth
               S01:080008CE:  06 2B
F04:0198       		bne MemDumpAgain
               S01:080008D0:  F6 D1
F04:0199       		
F04:0200       		mov r3,#0
               S01:080008D2:  00 23
F04:0201       MemDumpAgainB:
F04:0202       		mov r0,#0
               S01:080008D4:  00 20
F04:0203       		ldrb r0,[r4,r3]
               S01:080008D6:  E0 5C
F04:0204       		bl PrintCharSafe
               S01:080008D8:  00 F0 09 F8
F04:0205       		add r3,r3,#1
               S01:080008DC:  5B 1C
F04:0206       		cmp r3,#MonitorWidth
               S01:080008DE:  06 2B
F04:0207       		bne MemDumpAgainB
               S01:080008E0:  F8 D1
F04:0208       		add r4,r4,r3
               S01:080008E2:  E4 18
F04:0209       		bl NewLine
               S01:080008E4:  FF F7 F2 FE
F04:0210       		
F04:0211       		sub r1,r1,#1
               S01:080008E8:  49 1E
F04:0212       		bne MemDumpNextLine
               S01:080008EA:  E8 D1
F04:0213       	pop {r0-r7, pc}
               S01:080008EC:  FF BD
F04:0214       	
F04:0215       PrintCharSafe:
F04:0216       	push {r0-r7, lr}
               S01:080008EE:  FF B5
F04:0217       		cmp r0,#32
               S01:080008F0:  20 28
F04:0218       		blt PrintCharNG
               S01:080008F2:  04 DB
F04:0219       
F04:0220       		cmp r0,#128
               S01:080008F4:  80 28
F04:0221       		bgt PrintCharNG
               S01:080008F6:  02 DC
F04:0222       		
F04:0223       		bl printchar
               S01:080008F8:  FF F7 FA FE
F04:0224       	pop {r0-r7, pc}
               S01:080008FC:  FF BD
F04:0225       PrintCharNG:	  
F04:0226       		mov r0,#46 ;'.'
               S01:080008FE:  2E 20
F04:0227       		bl printchar
               S01:08000900:  FF F7 F6 FE
F04:0228       	pop {r0-r7, pc}
               S01:08000904:  FF BD
F04:0229       	  
F04:0230       	  	  
F04:0231       	  
F04:0232       	  
F04:0233       	  
F04:0234       	  
F04:0235       	  
F04:0236       	  
F04:0237       	  
F00:0416       
F00:0417       	.include "/srcALL/V1_Thumb_Footer.asm"
F05:0001       	.ifdef BuildNDS
F05:0002       		.include "\SrcNDS\V1_Thumb_Footer.asm"
F05:0003       	.endif
F00:0418       


Sections:
S01  seg8000000


Sources:
F00  Thumb_Lesson1.asm
F01  \gba_example3_thumb_test_a\V1_Header.asm
F02  \srcALL\V1_Thumb_BitmapMemory.asm
F03  \SrcGBA\V1_Thumb_BitmapMemory.asm
F04  \srcALL\V1_Thumb_Monitor.asm
F05  \srcALL\V1_Thumb_Footer.asm


Symbols:
PrintCharNG EXPR(134220030=0x80008fe) ABS 
PrintCharSafe EXPR(134220014=0x80008ee) ABS 
MemDumpAgainB EXPR(134219988=0x80008d4) ABS 
MemDumpAgain EXPR(134219968=0x80008c0) ABS 
MemDumpNextLine EXPR(134219966=0x80008be) ABS 
ShowHexN EXPR(134219938=0x80008a2) ABS 
ShowHex EXPR(134219858=0x8000852) ABS 
ShowHex32 EXPR(134219874=0x8000862) ABS 
ShowHexChar EXPR(134219926=0x8000896) ABS 
ShowRegPC EXPR(134219798=0x8000816) ABS 
ShowRegSP EXPR(134219784=0x8000808) ABS 
ShowRegB EXPR(134219838=0x800083e) ABS 
ShowRegLR EXPR(134219770=0x80007fa) ABS 
Monitor EXPR(134219616=0x8000760) UNUSED ABS 
LineSize2 EXPR(134219600=0x8000750) ABS 
DrawPixelSkip EXPR(134219558=0x8000726) ABS 
DrawPixel EXPR(134219552=0x8000720) ABS 
BitMask EXPR(134219608=0x8000758) ABS 
DrawLine EXPR(134219544=0x8000718) ABS 
FontColor EXPR(134219604=0x8000754) ABS 
BitmapFontAddress EXPR(134219612=0x800075c) ABS 
LineSize EXPR(134219596=0x800074c) ABS 
printchar EXPR(134219504=0x80006f0) ABS 
PrintStringDone EXPR(134219502=0x80006ee) ABS 
PrintStringAgain EXPR(134219488=0x80006e0) ABS 
PrintString EXPR(134219486=0x80006de) UNUSED ABS 
adrCursorY EXPR(134219588=0x8000744) ABS 
adrCursorX EXPR(134219584=0x8000740) ABS 
FillScreenLoop EXPR(134219440=0x80006b0) ABS 
screencolor EXPR(134219456=0x80006c0) ABS 
screenram EXPR(134219592=0x8000748) ABS 
screensetting EXPR(134219464=0x80006c8) ABS 
screenaddr EXPR(134219460=0x80006c4) ABS 
BitmapFont EXPR(134218656=0x80003a0) ABS 
ShowReg EXPR(134219812=0x8000824) ABS 
MemDump EXPR(134219946=0x80008aa) ABS 
TestRam2 EXPR(134218560=0x8000340) ABS 
MonitorR0R1R2R3 EXPR(134218588=0x800035c) ABS 
TestRam EXPR(134218532=0x8000324) ABS 
ShowTestRam EXPR(134218548=0x8000334) ABS 
TestAdds EXPR(134218358=0x8000276) UNUSED ABS 
InfLoop EXPR(134218522=0x800031a) ABS 
TestVal EXPR(134218528=0x8000320) ABS 
MonitorR0R8 EXPR(134218632=0x8000388) ABS 
NewLine EXPR(134219468=0x80006cc) ABS 
MonitorR0R1 EXPR(134218564=0x8000344) ABS 
TestMoves EXPR(134218278=0x8000226) UNUSED ABS 
TestRamRW EXPR(134218428=0x80002bc) ABS 
ScreenInit EXPR(134219424=0x80006a0) ABS 
SPAddress EXPR(134218544=0x8000330) ABS 
here EXPR(134218264=0x8000218) ABS 
locate EXPR(134218266=0x800021a) ABS 
over EXPR(134218262=0x8000216) ABS 
label_ EXPR(134217972=0x80000f4) ABS 
ThumbTest EXPR(134217972=0x80000f4) UNUSED ABS 
CursorY EXPR(33554465=0x2000021) 
GbaStart EXPR(134217960=0x80000e8) ABS 
MonitorWidth EXPR(6=0x6) 
CursorX EXPR(33554464=0x2000020) 
userram EXPR(33554432=0x2000000) UNUSED 
ramarea EXPR(33554432=0x2000000) 
ProgBase EXPR(0=0x0) UNUSED 
__VASM EXPR(0=0x0) INTERNAL 
BuildGBA EXPR(1=0x1) UNUSED 
vasm EXPR(1=0x1) UNUSED 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
